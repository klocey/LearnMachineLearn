# Retrieve and set the working directory
rm(list=ls())
getwd()
setwd("~/GitHub/DormancyDecay/empirical_analyses/DistanceDecay")
# Load packages
install.packages('simba', dependencies = TRUE)
require("simba")
install.packages("fossil", dependencies = TRUE)
require("fossil")
install.packages("maps")
install.packages("maps", repos = NULL, type="source")
install.packages("maps", type="source")
require("fossil")
install.packages("maps", type="source", dependencies = TRUE)
install.packages("fossil", dependencies = TRUE)
install.packages("fossil", dependencies = TRUE, type="source")
install.packages(c("fossil", "simba"))
require("simba")
require("fossil")
# Retrieve and set the working directory
rm(list=ls())
getwd()
setwd("~/GitHub/DormancyDecay/empirical_analyses/DistanceDecay")
# Load community data
load(file = "~/GitHub/DormancyDecay/data/MicrobialCommunity/INPond_Initial.RData")
# Load Environmental and Geographical Data
env <- read.table("~/GitHub/DormancyDecay/data/Environmental/20130801_INPondDataMod.csv", sep = ",", header = TRUE)
env <- env[complete.cases(env),]
env[which(env$Sample_ID == "HNF133"), ]["SpC"] <- 55
env[which(env$Sample_ID == "YSF46"), ]["lat"] <- 39.1186
# Select DNA Data: Use the `grep()` Command and Rename with `gsub()`
# The active portion, based on cDNA
act.com <- Pond97[grep("*-cDNA", rownames(Pond97)), ]
rownames(act.com) <- gsub("\\-cDNA", "", rownames(act.com))
# The community without respect to active or not, 16S rRNA gene sequences
all.com <- Pond97[grep("*-DNA", rownames(Pond97)), ]
rownames(all.com) <- gsub("\\-DNA", "", rownames(all.com))
# Remove Sites Not in the Environmental Data Set
act.com <- act.com[rownames(act.com)  %in% env$Sample_ID, ]
all.com <- all.com[rownames(all.com)  %in% env$Sample_ID, ]
# Remove sites not shared between matrices
all.com <- all.com[rownames(all.com)  %in% row.names(act.com),]
env <- env[env$Sample_ID %in% row.names(act.com),]
# Remove Zero-Occurrence Taxa
act.com <- act.com[ , colSums(act.com) > 0]
all.com <- all.com[ , colSums(all.com) > 0]
# Use relative abundance
act.com <- sweep(act.com, 1, rowSums(act.com), '/')
all.com <- sweep(all.com, 1, rowSums(all.com), '/')
rowMeans(act.com)
max(act.com)
max(all.com)
rowMeans(all.com)
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
# Geographic Distances (Kilometers) Among Ponds
long.lat <- as.matrix(cbind(env$long, env$lat))
geo.dist <- earth.dist(long.lat, dist = TRUE)
geo.dist <- geo.dist/max(geo.dist)
geo.dist[which(!is.finite(geo.dist))] = NA
# Define Environmental Matrix
env.dat <- as.matrix(subset(env, select = c("canopy", "DO", "ORP", "pH", "Temp", "DOC", "TDS", "Color", "chla", "TP", "Depth", "Salinity", "SpC", "DON", "Diameter")))
#env.dat <- as.matrix(subset(env, select = Diameter:TP))
env.dat <- scale(env.dat, center = TRUE, scale = TRUE)
# Conduct PCA
pca <- princomp(env.dat)
scores <- as.data.frame(pca$scores)
env.dist <- vegdist(scores[, 1], "euclidean")
env.dist <- env.dist/max(env.dist)
env.dist[which(!is.finite(env.dist))] = NA
write.table(scores[,1], "~/GitHub/DormancyDecay/model/EmpiricalDataForModeling/PCA-data/pca.txt", sep="\t")
write.table(env$long, "~/GitHub/DormancyDecay/model/EmpiricalDataForModeling/PCA-data/lon.txt", sep="\t")
# Taxonomic Distances Among Ponds
act.bray.dist <- 1 - vegdist(act.com, method="bray", binary=F)
all.bray.dist <- 1 - vegdist(all.com, method="bray", binary=F)
act.sore.dist <- 1 - vegdist(act.com, method="bray", binary=T)
all.sore.dist <- 1 - vegdist(all.com, method="bray", binary=T)
act.canb.dist <- 1 - vegdist(act.com, method="canberra", binary=F)
all.canb.dist <- 1 - vegdist(all.com, method="canberra", binary=F)
# Retrieve and set the working directory
rm(list=ls())
getwd()
setwd("~/GitHub/DormancyDecay/empirical_analyses/DistanceDecay")
# Load packages
#install.packages('simba', dependencies = TRUE)
require("simba")
#install.packages("fossil")
require("fossil")
require("dplyr")
require("picante")
# Retrieve and set the working directory
rm(list=ls())
# Retrieve and set the working directory
rm(list=ls())
getwd()
setwd("~/GitHub/DormancyDecay/empirical_analyses/DistanceDecay")
# Load packages
#install.packages('simba', dependencies = TRUE)
require("simba")
#install.packages("fossil")
require("fossil")
require("dplyr")
require("picante")
# Load community data
load(file = "~/GitHub/DormancyDecay/data/MicrobialCommunity/INPond_Initial.RData")
# Load Environmental and Geographical Data
env <- read.table("~/GitHub/DormancyDecay/data/Environmental/20130801_INPondDataMod.csv", sep = ",", header = TRUE)
env <- env[complete.cases(env),]
env[which(env$Sample_ID == "HNF133"), ]["SpC"] <- 55
env[which(env$Sample_ID == "YSF46"), ]["lat"] <- 39.1186
# Select DNA Data: Use the `grep()` Command and Rename with `gsub()`
# The active portion, based on cDNA
act.com <- Pond97[grep("*-cDNA", rownames(Pond97)), ]
rownames(act.com) <- gsub("\\-cDNA", "", rownames(act.com))
# The community without respect to active or not, 16S rRNA gene sequences
all.com <- Pond97[grep("*-DNA", rownames(Pond97)), ]
rownames(all.com) <- gsub("\\-DNA", "", rownames(all.com))
# Remove Sites Not in the Environmental Data Set
act.com <- act.com[rownames(act.com)  %in% env$Sample_ID, ]
all.com <- all.com[rownames(all.com)  %in% env$Sample_ID, ]
# Remove sites not shared between matrices
all.com <- all.com[rownames(all.com)  %in% row.names(act.com),]
env <- env[env$Sample_ID %in% row.names(act.com),]
# Remove Zero-Occurrence Taxa
act.com <- act.com[ , colSums(act.com) > 0]
all.com <- all.com[ , colSums(all.com) > 0]
# Use relative abundance
act.com <- sweep(act.com, 1, rowSums(act.com), '/')
all.com <- sweep(all.com, 1, rowSums(all.com), '/')
rowMeans(act.com)
max(act.com)
# Select DNA Data: Use the `grep()` Command and Rename with `gsub()`
# The active portion, based on cDNA
act.com <- Pond97[grep("*-cDNA", rownames(Pond97)), ]
rownames(act.com) <- gsub("\\-cDNA", "", rownames(act.com))
# The community without respect to active or not, 16S rRNA gene sequences
all.com <- Pond97[grep("*-DNA", rownames(Pond97)), ]
rownames(all.com) <- gsub("\\-DNA", "", rownames(all.com))
# Remove Sites Not in the Environmental Data Set
act.com <- act.com[rownames(act.com)  %in% env$Sample_ID, ]
all.com <- all.com[rownames(all.com)  %in% env$Sample_ID, ]
# Remove sites not shared between matrices
all.com <- all.com[rownames(all.com)  %in% row.names(act.com),]
env <- env[env$Sample_ID %in% row.names(act.com),]
# Remove Zero-Occurrence Taxa
act.com <- act.com[ , colSums(act.com) > 0]
all.com <- all.com[ , colSums(all.com) > 0]
rowMeans(act.com)
max(act.com)
max(all.com)
rowMeans(all.com)
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
mean(rowMeans(act.com))
mean(max(act.com))
max(all.com)
rowMeans(all.com)
rowMeans(all.com)
max(all.com)
rowMeans(all.com)
mean(rowMeans(all.com))
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
# Retrieve and set the working directory
rm(list=ls())
getwd()
setwd("~/GitHub/DormancyDecay/empirical_analyses/DistanceDecay")
# Load packages
#install.packages('simba', dependencies = TRUE)
require("simba")
#install.packages("fossil")
require("fossil")
require("dplyr")
require("picante")
# Load community data
load(file = "~/GitHub/DormancyDecay/data/MicrobialCommunity/INPond_Initial.RData")
# Load Environmental and Geographical Data
env <- read.table("~/GitHub/DormancyDecay/data/Environmental/20130801_INPondDataMod.csv", sep = ",", header = TRUE)
env <- env[complete.cases(env),]
env[which(env$Sample_ID == "HNF133"), ]["SpC"] <- 55
env[which(env$Sample_ID == "YSF46"), ]["lat"] <- 39.1186
# Select DNA Data: Use the `grep()` Command and Rename with `gsub()`
# The active portion, based on cDNA
act.com <- Pond97[grep("*-cDNA", rownames(Pond97)), ]
rownames(act.com) <- gsub("\\-cDNA", "", rownames(act.com))
# The community without respect to active or not, 16S rRNA gene sequences
all.com <- Pond97[grep("*-DNA", rownames(Pond97)), ]
rownames(all.com) <- gsub("\\-DNA", "", rownames(all.com))
# Remove Sites Not in the Environmental Data Set
act.com <- act.com[rownames(act.com)  %in% env$Sample_ID, ]
all.com <- all.com[rownames(all.com)  %in% env$Sample_ID, ]
# Remove sites not shared between matrices
all.com <- all.com[rownames(all.com)  %in% row.names(act.com),]
env <- env[env$Sample_ID %in% row.names(act.com),]
# Remove Zero-Occurrence Taxa
act.com <- act.com[ , colSums(act.com) > 0]
all.com <- all.com[ , colSums(all.com) > 0]
mean(rowMeans(act.com))
max(all.com)
mean(max(act.com))
mean(rowMeans(act.com))
mean(max(act.com))
max(all.com)
max(act.com)
mean(rowMeans(act.com))
mean(max(act.com))
max(act.com)
max(act.com)
mean(rowMeans(act.com))
max(act.com)
mean(rowMeans(all.com))
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
mean(rowMeans(act.com))
max(act.com)
mean(rowMeans(all.com))
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
mean(rowSums(act.com))#/21568
mean(rowSums(act.com != 0))#/21568
mean(rowSums(act.com != 0))#/21568
mean(rowSums(act.com))#/21568
rowSums(act.com != 0)#/21568
rowSums(act.com)#/21568
View(act.com)
rowSums(act.com != 0)#/21568
rowSums(act.com == 0)#/21568
rowSums(act.com != 0)#/21568
mean(rowMeans(all.com))
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
mean(rowMeans(act.com))
max(act.com)
mean(rowMeans(all.com))
# Retrieve and set the working directory
rm(list=ls())
getwd()
# Retrieve and set the working directory
rm(list=ls())
getwd()
setwd("~/GitHub/DormancyDecay/empirical_analyses/DistanceDecay")
# Load packages
#install.packages('simba', dependencies = TRUE)
require("simba")
#install.packages("fossil", dependencies = TRUE, type="source")
require("fossil")
# Load community data
load(file = "~/GitHub/DormancyDecay/data/MicrobialCommunity/INPond_Initial.RData")
# Load Environmental and Geographical Data
env <- read.table("~/GitHub/DormancyDecay/data/Environmental/20130801_INPondDataMod.csv", sep = ",", header = TRUE)
env <- env[complete.cases(env),]
env[which(env$Sample_ID == "HNF133"), ]["SpC"] <- 55
env[which(env$Sample_ID == "YSF46"), ]["lat"] <- 39.1186
# Select DNA Data: Use the `grep()` Command and Rename with `gsub()`
# The active portion, based on cDNA
act.com <- Pond97[grep("*-cDNA", rownames(Pond97)), ]
rownames(act.com) <- gsub("\\-cDNA", "", rownames(act.com))
# The community without respect to active or not, 16S rRNA gene sequences
all.com <- Pond97[grep("*-DNA", rownames(Pond97)), ]
rownames(all.com) <- gsub("\\-DNA", "", rownames(all.com))
# Remove Sites Not in the Environmental Data Set
act.com <- act.com[rownames(act.com)  %in% env$Sample_ID, ]
all.com <- all.com[rownames(all.com)  %in% env$Sample_ID, ]
# Remove sites not shared between matrices
all.com <- all.com[rownames(all.com)  %in% row.names(act.com),]
env <- env[env$Sample_ID %in% row.names(act.com),]
# Remove Zero-Occurrence Taxa
act.com <- act.com[ , colSums(act.com) > 0]
all.com <- all.com[ , colSums(all.com) > 0]
mean(rowSums(act.com != 0))#/21568
mean(rowSums(all.com != 0))#/27466
sd(rowSums(act.com != 0))
rowMeans(act.com)
max(act.com)
max(all.com)
rowMeans(all.com)
#rowMeans(all.com)
mean(rowSums(act.com != 0))#/21568
sd(rowSums(act.com != 0))
mean(rowSums(all.com != 0))#/27466
sd(rowSums(all.com != 0))
install.packages("healthcareai", dependencies = TRUE, type="source")
require("healthcareai")
require("healthcareai")
load("healthcareai")
install.packages("testthat", dependencies = TRUE, type="source")
install.packages("processx", dependencies = TRUE, type="source")
install.packages("devtools", dependencies = TRUE, type="source")
install.packages("devtools", dependencies = TRUE, type="source")
install.packages("devtools")
install.packages("rlang")
install.packages("devtools")
install.packages("healthcareai", dependencies = TRUE, type="source")
load("devtools")
load('devtools')
install.packages("devtools")
install.packages("healthcareai")
load("healthcareai")
load("healthcare.ai")
load('healthcareai')
require(healthcareai)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
rm(list=ls())
getwd()
setwd("~/GitHub/LearnMachineLearn/healthcareai")
library(ggplot2)
# Chunk 3
df <- read.csv("SimData/SimData.csv")
# Chunk 4
models <- machine_learn(df, patient_id, yrs_smoker, diabetes, outcome = diabetes_type)
# Chunk 5
predictions <- predict(models)
plot(predictions)
ggplot(df, aes(predictions$diabetes_type, predictions$predicted_diabetes_type,
colour = predictions$diabetes_type)) + geom_point(alpha = 0.1)
plot(predictions$diabetes_type, predictions$predicted_diabetes_type, pch=19,
col = rgb(red = 1, green = 0.2, blue = 0.5, alpha = 0.1),
cex = 4)
# Chunk 6
#missingness(df) %>%
#plot()
predictions <- predict(models)
df <- read.csv("SimData/SimData.csv")
models <- machine_learn(df, patient_id, yrs_smoker, diabetes, outcome = diabetes_type)
library(healthcareai)
models <- machine_learn(df, patient_id, yrs_smoker, diabetes, outcome = diabetes_type)
predictions <- predict(models)
plot(predictions)
ggplot(df, aes(predictions$diabetes_type, predictions$predicted_diabetes_type,
colour = predictions$diabetes_type)) + geom_point(alpha = 0.1)
plot(predictions$diabetes_type, predictions$predicted_diabetes_type, pch=19,
col = rgb(red = 1, green = 0.2, blue = 0.5, alpha = 0.1),
cex = 4)
models <- machine_learn(df, patient_id, yrs_smoker, diabetes, outcome = diabetes)
models <- machine_learn(df, patient_id, yrs_smoker, diabetes_type, outcome = diabetes)
predictions <- predict(models)
plot(predictions)
install.packages('prophet', type="source")
